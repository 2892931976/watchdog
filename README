Watchdog
========
Python API and shell utilities to monitor file system events.

Example API Usage
-----------------
A simple program that uses watchdog to monitor directories specified
as command-line arguments and logs events generated::

	import sys
	import time
	from watchdog.observers import Observer
	from watchdog.events import FileSystemEventHandler
	import logging

	logging.basicConfig(level=logging.DEBUG)

	class MyEventHandler(FileSystemEventHandler):
	    def catch_all_handler(self, event):
	        logging.debug(event)

	    def on_moved(self, event):
	        self.catch_all_handler(event)

	    def on_created(self, event):
	        self.catch_all_handler(event)

	    def on_deleted(self, event):
	        self.catch_all_handler(event)

	    def on_modified(self, event):
	        self.catch_all_handler(event)

    path = sys.argv[1]

	event_handler = MyEventHandler()
	observer = Observer()
	observer.schedule(event_handler, path, recursive=True)
	observer.start()
	try:
	    while True:
	        time.sleep(1)
	except KeyboardInterrupt:
	    observer.stop()
	observer.join()


Shell Utilities
---------------
Watchdog comes with a utility script called ``watchmedo``.
Please type ``watchmedo --help`` at the shell prompt to
know more about this tool.

Here is how you can log the current directory recursively
for events related only to ``*.py`` and ``*.txt`` files while
ignoring all directory events:

    watchmedo log \
        --patterns="*.py;*.txt" \
        --ignore-directories \
        --recursive \
        .

If you'd like to execute shell commands in response to
events you can use the ``shell-command`` subcommand like this::

    watchmedo shell-command \
        --patterns="*.py;*.txt" \
        --recursive \
        --command='echo "${watch_src_path}"' \
        .

Please see the help information for these commands by typing::

    watchmedo [command] --help


About ``watchmedo`` Tricks
~~~~~~~~~~~~~~~~~~~~~~~~~~
``watchmedo`` can read ``tricks.yaml`` files and execute tricks within them in
response to file system events. Tricks are actually ``FileSystemEventHandler``.
More specifically, they are subclasses of ``watchdog.tricks.Trick`` that plugin
authors can write. Trick classes are augmented with a few additional features
that regular event handlers don't need.

An example ``tricks.yaml`` file::

    tricks:
    - watchdog.tricks.LoggerTrick:
        patterns: ["*.py", "*.js"]
    - watchmedo_webtricks.GoogleClosureTrick:
        patterns: ['*.js']
        hash_names: true
        mappings_format: json                  # json|yaml|python
        mappings_module: app/javascript_mappings
        suffix: .min.js
        compilation_level: advanced            # simple|advanced
        source_directory: app/static/js/
        destination_directory: app/public/js/
        files:
          index-page:
          - app/static/js/vendor/jquery.js
          - app/static/js/base.js
          - app/static/js/index-page.js
          about-page:
          - app/static/js/vendor/jquery.js
          - app/static/js/base.js
          - app/static/js/about-page.js

The directory containing the ``tricks.yaml`` file will be monitored. Each trick
class is initialized with its corresponding keys in the ``tricks.yaml`` file as
arguments and events are fed to an instance of this class as they arrive.

Tricks will be included in the 0.5.0 release. I need community input about them.
Please file enhancement requests at the `issue tracker`_.

Installation:
-------------

Installing from PyPI using ``pip``::

    pip install watchdog

Installing from PyPI using ``easy_install``::

    easy_install watchdog

Installing from source::

    python setup.py install


Installation Caveats
~~~~~~~~~~~~~~~~~~~~
The ``watchmedo`` scripts depends on PyYAML which links with ``libyaml``.
On Mac OS X, you can use homebrew_ to install libyaml::

    brew install libyaml

On Linux use your favorite package manager to install libyaml. Here's how you
do it on Ubuntu::

    sudo aptitude install libyaml-dev

On Windows, please install PyYAML using the binaries they provide.

Supported Platforms
-------------------
* Linux 2.6 (inotify)
* Mac OS X (FSEvents, kqueue)
* FreeBSD/BSD (kqueue)
* Windows (ReadDirectoryChangesW with I/O completion ports;
  ReadDirectoryChangesW worker threads)
* OS-independent (polling the disk for directory snapshots and comparing them
  periodically; slow and not recommended)

Dependencies
------------
1. Python 2.5 or above.
2. XCode_ (only on Mac OS X)
3. PyYAML_
4. argh_
5. select_backport_ (select.kqueue replacement for Python2.5/2.6 on BSD/Mac OS X)

Licensing
---------
Watchdog is licensed under the terms of the `MIT License`_.

Copyright (C) 2010 Gora Khargosh and the Watchdog authors.

Project source code at `source code`_. Please report bugs and file enhancement
requests at the `issue tracker`_.

Why Watchdog?
-------------
Too many people tried to do the same thing and none did
what I needed Python to do:

.. _pnotify: http://mark.heily.com/pnotify
.. _unison fsmonitor: https://webdav.seas.upenn.edu/viewvc/unison/trunk/src/fsmonitor.py?view=markup&pathrev=471
.. _fsmonitor: http://github.com/shaurz/fsmonitor
.. _guard: http://github.com/guard/guard
.. _pyinotify: http://github.com/seb-m/pyinotify
.. _inotify-tools: http://github.com/rvoicilas/inotify-tools
.. _jnotify: http://jnotify.sourceforge.net/
.. _treewalker: http://github.com/jbd/treewatcher
.. _file.monitor: http://github.com/pke/file.monitor
.. _pyfilesystem: http://code.google.com/p/pyfilesystem


.. links:
.. _select_backport: http://pypi.python.org/pypi/select_backport
.. _argh: http://pypi.python.org/pypi/argh
.. _PyYAML: http://www.pyyaml.org/
.. _Xcode: http://developer.apple.com/technologies/tools/xcode.html
.. _source code: http://github.com/gorakhargosh/watchdog
.. _issue tracker: http://github.com/gorakhargosh/watchdog/issues
